{"version":3,"sources":["components/card/card.component.js","components/card-list/card-list.component.js","components/search-box/search-box.component.js","App.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","SearchBox","placeholder","handleChange","type","onChange","App","e","setState","searchField","target","value","state","fetch","then","res","json","users","this","filteredMonsters","filter","toLowerCase","includes","Component","ReactDOM","render","document","getElementById"],"mappings":"kTAIaA,EAAO,SAACC,GAAD,OAClB,sBAAKC,UAAU,iBAAf,UAKE,qBACEC,IAAI,UACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEL,mCAAML,EAAMI,QAAQE,KAApB,OACA,kCAAKN,EAAMI,QAAQG,MAAnB,WCTSC,G,MAAW,SAAAR,GAAK,OACzB,qBAAKC,UAAU,YAAf,SACKD,EAAMS,SAASC,KAAI,SAAAN,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,WCDlBM,G,MAAY,SAAC,GAAD,IAAGC,EAAH,EAAGA,YAAaC,EAAhB,EAAgBA,aAAhB,OACvB,uBACEZ,UAAU,SACVa,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCyCCG,G,wDAhDb,aAAe,IAAD,8BACZ,gBAcFH,aAAe,SAACI,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAbtC,EAAKC,MAAQ,CACXb,SAAU,GACVU,YAAa,IALH,E,qDASd,WAAqB,IAAD,OAClBI,MAAM,8CACLC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAAET,SAAUkB,S,oBAO3C,WAAS,MAM2BC,KAAKN,MAA/Bb,EAND,EAMCA,SAAUU,EANX,EAMWA,YAIZU,EAAmBpB,EAASqB,QAAO,SAAA1B,GAAO,OAC9CA,EAAQE,KAAKyB,cAAcC,SAASb,EAAYY,kBAGlD,OACE,sBAAK9B,UAAU,MAAf,UACE,oDACA,cAAC,EAAD,CACEW,YAAY,kBACZC,aAAce,KAAKf,eAGrB,cAAC,EAAD,CAAUJ,SAAUoB,W,GA1CVI,cCAlBC,IAASC,OAAQ,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.2352b0a1.chunk.js","sourcesContent":["import React from 'react';\n\nimport './card-component.styles.css';\n\nexport const Card = (props) => (\n  <div className='card-container'>\n\n    {/* Passing in the ${props.monster.id} allows \n    robohash to generate a unique image for each \n    user based on the id of that user */}\n    <img \n      alt='monster' \n      src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`} \n    />\n    <h2> {props.monster.name} </h2>\n    <p> {props.monster.email} </p>\n  </div>\n)","import React from 'react';\n\nimport { Card } from '../card/card.component';\n\nimport './card-list.styles.css';\n\nexport const CardList = props => (\n    <div className='card-list'>\n        {props.monsters.map(monster => (\n            <Card key={monster.id} monster={monster} />\n        ))}\n    </div>\n);          \n","import React from 'react';\n\nimport './search-box.styles.css';\n\n  // This will be a Functional Component (rather than a Class-Based Component)\n  // Use Functional Components when you don't need access to state or life-cycle methods. \n\n  // Destructuring the props values allows us to use them dynamically in the input below\nexport const SearchBox = ({ placeholder, handleChange }) => (\n  <input \n    className='search'\n    type='search'\n    placeholder={placeholder}\n    onChange={handleChange}\n  />\n);","import React, { Component } from 'react';\nimport { CardList } from './components/card-list/card-list.component';\nimport { SearchBox } from './components/search-box/search-box.component';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    \n    this.state = {\n      monsters: [],\n      searchField: ''\n    };\n  }\n  \n  componentDidMount() {\n    fetch(\"https://jsonplaceholder.typicode.com/users\")\n    .then(res => res.json())\n    .then(users => this.setState({ monsters: users}));\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  }\n  \n  render() {\n\n      // Using destructuring, we can pull properties off of an \n      // existing object and set them to constants that we can use\n      // Here we use the this.state object to pull the monsters and\n      // searchField properties and assign them to constants.\n    const { monsters, searchField } = this.state;\n\n      // Now we write a function that filters the monsters and assign it to a constant\n      // using the toLowerCase() method ensures that the search is NOT case sensitive\n    const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n      )\n\n    return (\n      <div className=\"App\">\n        <h1> Monsters Rolodex </h1>\n        <SearchBox \n          placeholder='search monsters'\n          handleChange={this.handleChange}\n        />\n          {/* Pass in filteredMonsters to generate the filtered list */}\n        <CardList monsters={filteredMonsters}>\n        </CardList>\n      </div>\n    );\n  }       \n}   \n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render( <App /> ,document.getElementById('root'));\n\n"],"sourceRoot":""}